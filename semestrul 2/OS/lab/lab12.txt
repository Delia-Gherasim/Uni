lab 12 os
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

 

int main()
{
        int a, b, s, p;
        int p2c[2], c2p[2];

 

        pipe(p2c); pipe(c2p);

 

        int pid = fork();

 

        if (pid == 0)
        {
                close(p2c[1]); close(c2p[0]);

 

                while (1)
                {
                        if (read(p2c[0], &a, sizeof(int)) <= 0)
                                break;

 

                        if (read(p2c[0], &b, sizeof(int)) <= 0)
                                break;

 

                        s = a + b;
                        p = a * b;

 

                        write(c2p[1], &s, sizeof(int));
                        write(c2p[1], &p, sizeof(int));
                }

 

                close(p2c[0]); close(c2p[1]);

 

                exit(0);
        }

 

        close(p2c[0]); close(c2p[1]);

 

        while (1)
        {
                scanf("%d %d", &a, &b);

 

                write(p2c[1], &a, sizeof(int));
                write(p2c[1], &b, sizeof(int));

 

                read(c2p[0], &s, sizeof(int));
                read(c2p[0], &p, sizeof(int));

 

                printf("Sum: %d\nProduct: %d\n\n", s, p);

 

                if (s == p)
                        break;
        }

 

        close(p2c[1]); close(c2p[0]);

 

        wait(0);
        return 0;
}


#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

 

typedef struct {
        int *a, *b, *c, start, end;
} param;

 

void* f(void* arg)
{
        param params = *(param*)arg;

 

        for (int i = params.start; i < params.end; i++)
                params.c[i] = params.a[i] + params.b[i];

 

        return NULL;
}

 

void printArray(int *arr, int size)
{
        for (int i = 0; i < size; i++)
                printf("%d ", arr[i]);

 

        printf("\n");
}

 

int main()
{
        int p = 4;
        pthread_t th[p];

 

        int *a, *b, *c, n = 10;

 

        a = (int*) malloc(sizeof(int) * n);
        b = (int*) malloc(sizeof(int) * n);
        c = (int*) malloc(sizeof(int) * n);

 

        for (int i = 0; i < n; i++)
        {
                a[i] = rand() % 10;
                b[i] = rand() % 10;
        }

 

        printf("a = ");
        printArray(a, n);

 

        printf("b = ");
        printArray(b, n);

 

        int start = 0, end;
        int r = n % p;

 

        param params[p];

 

        for (int i = 0; i < p; i++)
        {
                end = start + n / p;
                if (r > 0)
                {
                        end++;
                        r--;
                }

 

                params[i].a = a; params[i].b = b; params[i].c = c;
                params[i].start = start; params[i].end = end;

 

                pthread_create(&th[i], NULL, f, (void*)&params[i]);
                start = end;
        }

 

        for (int i = 0; i < p; i++)
                pthread_join(th[i], NULL);

 

        printf("c= ");
        printArray(c, n);

 

        return 0;
}