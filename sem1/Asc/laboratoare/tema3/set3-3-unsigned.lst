     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 00                          a db 0
    14 00000001 02                          b db 2
    15 00000002 0A000000                    c dd 10
    16 00000006 05                          d db 5
    17 00000007 1300000000000000            x dq 19
    18                                  
    19                                  ; (8-a*b*100+c)/d+x=(8-0+10)/5+19=22
    20                                  ; a,b,d-byte; c-doubleword; x-qword
    21                                  segment code use32 class=code
    22                                      start:
    23 00000000 A0[00000000]                    mov al, [a] 
    24 00000005 8A1D[01000000]                  mov bl, [b]
    25 0000000B F6E3                            mul bl          
    26 0000000D 66BB6400                        mov bx, 100
    27 00000011 66F7E3                          mul bx  
    28 00000014 6652                            push dx
    29 00000016 6650                            push ax
    30 00000018 58                              pop eax
    31 00000019 89C3                            mov ebx, eax
    32 0000001B B808000000                      mov eax, 8
    33 00000020 29D8                            sub eax, ebx
    34 00000022 8B1D[02000000]                  mov ebx, [c]
    35 00000028 01D8                            add eax, ebx
    36 0000002A 8A1D[06000000]                  mov bl, [d]
    37 00000030 B700                            mov bh, 0
    38 00000032 66F7F3                          div bx      
    39 00000035 66BA0000                        mov dx, 0
    40 00000039 6652                            push dx
    41 0000003B 6650                            push ax
    42 0000003D 58                              pop eax
    43 0000003E BA00000000                      mov edx, 0  
    44 00000043 8B1D[07000000]                  mov ebx, [x]
    45 00000049 8B0D[0B000000]                  mov ecx, [x+4]
    46 0000004F 01D8                            add eax, ebx
    47 00000051 11CA                            adc edx, ecx
    48                                          
    49                                          ; exit(0)
    50 00000053 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    51 00000055 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
