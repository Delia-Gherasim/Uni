     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 04                          a db 4
    14 00000001 0A00                        b dw 10
    15 00000003 08000000                    c dd 8
    16 00000007 FAFFFFFFFFFFFFFF            d dq -6
    17                                  
    18                                  ; our code starts here
    19                                  ;(b+b+d)-(c+a)=(10+10-6)-(8+4)=14-12=2
    20                                  ;a - byte, b - word, c - double word, d - qword - Signed representation
    21                                  segment code use32 class=code
    22                                      start:
    23 00000000 66A1[01000000]                  mov ax, [b]
    24 00000006 6601C0                          add ax, ax
    25 00000009 98                              cwde
    26 0000000A 99                              cdq         ;edx:eax=b+b=20
    27 0000000B 8B1D[07000000]                  mov ebx, [d]
    28 00000011 8B0D[0B000000]                  mov ecx, [d+4]
    29 00000017 01C3                            add ebx, eax
    30 00000019 11D1                            adc ecx, edx    ;ecx:ebx=b+b+d=14
    31 0000001B 8B15[03000000]                  mov edx, [c]
    32 00000021 A0[00000000]                    mov al, [a]
    33 00000026 6698                            cbw
    34 00000028 98                              cwde           ;eax=a=4
    35 00000029 01D0                            add eax, edx    ;eax=c+a=12
    36 0000002B 99                              cdq      ;edx:eax=0
    37 0000002C 29C3                            sub ebx, eax
    38 0000002E 29D1                            sub ecx, edx
    39 00000030 89D8                            mov eax, ebx
    40 00000032 89CA                            mov edx, ecx
    41                                      
    42                                          ; exit(0)
    43 00000034 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    44 00000036 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
