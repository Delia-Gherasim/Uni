     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 01                          a db 1
    14 00000001 02                          b db 2
    15 00000002 0A000000                    c dd 10
    16 00000006 05                          d db 5
    17 00000007 1300000000000000            x dq 19
    18                                  
    19                                  ; (8-a*b*100+c)/d+x=(8-200+10)/5+19=-182/5+19=-36+19=-17
    20                                  ; a,b,d-byte; c-doubleword; x-qword
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24 00000000 A0[00000000]                    mov al, [a]
    25 00000005 F62D[01000000]                  imul byte [b]    ;ax=a*b
    26 0000000B 66BB6400                        mov bx, 100
    27 0000000F 66F7EB                          imul bx    ;dx:ax=a*b*100
    28 00000012 66B90000                        mov cx, 0
    29 00000016 66BB0800                        mov bx, 8
    30 0000001A 6629C3                          sub bx, ax    ;cx:bx=8-a*b*100+c
    31 0000001D 6619D1                          sbb cx, dx
    32 00000020 66031D[02000000]                add bx, [c]
    33 00000027 66130D[06000000]                adc cx, [c+4]
    34 0000002E 6689CA                          mov dx, cx
    35 00000031 6689D8                          mov ax, bx
    36 00000034 8A1D[06000000]                  mov bl, [d]
    37 0000003A 6698                            cbw
    38 0000003C 66F7FB                          idiv bx
    39 0000003F 98                              cwde
    40 00000040 BA00000000                      mov edx, 0
    41 00000045 8B1D[07000000]                  mov ebx, [x]
    42 0000004B 8B0D[0B000000]                  mov ecx, [x+4]
    43 00000051 01D8                            add eax, ebx
    44 00000053 11CA                            adc edx, ecx
    45                                          ; exit(0)
    46 00000055 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    47 00000057 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
