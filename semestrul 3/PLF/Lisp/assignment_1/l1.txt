
(in-package :common-lisp)

;Write a function to return the n-th element of a list, or NIL if such an element does not exist
(defun a (n L)
  (cond
    ((null L) nil)
    ((= n 1) (format t "Element is ~a~%"  (car L)))
    (t (a (- n 1) (cdr L)))
  )
)

(a 4 '(A B C D))
;(a 2 '(A B C D E F G H I J K L M))

;Write a function to check whether an atom E is a member of a list which is not necessarily linear.
(defun b (e L)
  (cond
    ((null L) nil)
    ((eql e (car L)))
    (t (b e (cdr L)))
  )
)

(setq result (b 'X '(A B C D E)))
(print result)
(setq result (b 'B '(A B C D E)))
(print result)


;Write a function to determine the list of all sublists of a given list, on any level.
(defun c (L)
  (cond
    ((null L) nil)
    ((listp (car L))
    (append (list (car L)) (c (car L)) (c (cdr L))))
    (t (c (cdr L)))
      
  )
)

(c '(((A) B) ((1)) C (D E)))
(setq result (c '(((A) B) ((1)) C (D E))))
(print result)


;Write a function to transform a linear list into a set.
(defun d (L)
  (cond
    ((null L) nil)
    ((member (car L) (cdr L) :test #'equal) (d (cdr L)))
    (t (cons (car L) (d (cdr L))))))

(setq result (d '(A A B C D A E)))
(print result)